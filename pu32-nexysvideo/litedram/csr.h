//--------------------------------------------------------------------------------
// Auto-generated by Migen (7014bdc) & LiteX (75134605) on 2022-03-15 18:59:15
//--------------------------------------------------------------------------------
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include "common.h"
#define MAIN_RAM_BASE (0x1000)
#define CSR_BASE (MAIN_RAM_BASE+0x20000000)

/* ddrphy */
#define CSR_DDRPHY_BASE (CSR_BASE + 0x0L)
#define CSR_DDRPHY_RST_ADDR (CSR_BASE + 0x0L)
#define CSR_DDRPHY_RST_SIZE 1
static inline uint8_t ddrphy_rst_read(void) {
	return csr_read_simple(CSR_BASE + 0x0L);
}
static inline void ddrphy_rst_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x0L);
}
#define CSR_DDRPHY_HALF_SYS8X_TAPS_ADDR (CSR_BASE + 0x4L)
#define CSR_DDRPHY_HALF_SYS8X_TAPS_SIZE 1
static inline uint8_t ddrphy_half_sys8x_taps_read(void) {
	return csr_read_simple(CSR_BASE + 0x4L);
}
static inline void ddrphy_half_sys8x_taps_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x4L);
}
#define CSR_DDRPHY_WLEVEL_EN_ADDR (CSR_BASE + 0x8L)
#define CSR_DDRPHY_WLEVEL_EN_SIZE 1
static inline uint8_t ddrphy_wlevel_en_read(void) {
	return csr_read_simple(CSR_BASE + 0x8L);
}
static inline void ddrphy_wlevel_en_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x8L);
}
#define CSR_DDRPHY_WLEVEL_STROBE_ADDR (CSR_BASE + 0xcL)
#define CSR_DDRPHY_WLEVEL_STROBE_SIZE 1
static inline uint8_t ddrphy_wlevel_strobe_read(void) {
	return csr_read_simple(CSR_BASE + 0xcL);
}
static inline void ddrphy_wlevel_strobe_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0xcL);
}
#define CSR_DDRPHY_DLY_SEL_ADDR (CSR_BASE + 0x10L)
#define CSR_DDRPHY_DLY_SEL_SIZE 1
static inline uint8_t ddrphy_dly_sel_read(void) {
	return csr_read_simple(CSR_BASE + 0x10L);
}
static inline void ddrphy_dly_sel_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x10L);
}
#define CSR_DDRPHY_RDLY_DQ_RST_ADDR (CSR_BASE + 0x14L)
#define CSR_DDRPHY_RDLY_DQ_RST_SIZE 1
static inline uint8_t ddrphy_rdly_dq_rst_read(void) {
	return csr_read_simple(CSR_BASE + 0x14L);
}
static inline void ddrphy_rdly_dq_rst_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x14L);
}
#define CSR_DDRPHY_RDLY_DQ_INC_ADDR (CSR_BASE + 0x18L)
#define CSR_DDRPHY_RDLY_DQ_INC_SIZE 1
static inline uint8_t ddrphy_rdly_dq_inc_read(void) {
	return csr_read_simple(CSR_BASE + 0x18L);
}
static inline void ddrphy_rdly_dq_inc_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x18L);
}
#define CSR_DDRPHY_RDLY_DQ_BITSLIP_RST_ADDR (CSR_BASE + 0x1cL)
#define CSR_DDRPHY_RDLY_DQ_BITSLIP_RST_SIZE 1
static inline uint8_t ddrphy_rdly_dq_bitslip_rst_read(void) {
	return csr_read_simple(CSR_BASE + 0x1cL);
}
static inline void ddrphy_rdly_dq_bitslip_rst_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x1cL);
}
#define CSR_DDRPHY_RDLY_DQ_BITSLIP_ADDR (CSR_BASE + 0x20L)
#define CSR_DDRPHY_RDLY_DQ_BITSLIP_SIZE 1
static inline uint8_t ddrphy_rdly_dq_bitslip_read(void) {
	return csr_read_simple(CSR_BASE + 0x20L);
}
static inline void ddrphy_rdly_dq_bitslip_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x20L);
}
#define CSR_DDRPHY_WDLY_DQ_BITSLIP_RST_ADDR (CSR_BASE + 0x24L)
#define CSR_DDRPHY_WDLY_DQ_BITSLIP_RST_SIZE 1
static inline uint8_t ddrphy_wdly_dq_bitslip_rst_read(void) {
	return csr_read_simple(CSR_BASE + 0x24L);
}
static inline void ddrphy_wdly_dq_bitslip_rst_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x24L);
}
#define CSR_DDRPHY_WDLY_DQ_BITSLIP_ADDR (CSR_BASE + 0x28L)
#define CSR_DDRPHY_WDLY_DQ_BITSLIP_SIZE 1
static inline uint8_t ddrphy_wdly_dq_bitslip_read(void) {
	return csr_read_simple(CSR_BASE + 0x28L);
}
static inline void ddrphy_wdly_dq_bitslip_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x28L);
}
#define CSR_DDRPHY_RDPHASE_ADDR (CSR_BASE + 0x2cL)
#define CSR_DDRPHY_RDPHASE_SIZE 1
static inline uint8_t ddrphy_rdphase_read(void) {
	return csr_read_simple(CSR_BASE + 0x2cL);
}
static inline void ddrphy_rdphase_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x2cL);
}
#define CSR_DDRPHY_WRPHASE_ADDR (CSR_BASE + 0x30L)
#define CSR_DDRPHY_WRPHASE_SIZE 1
static inline uint8_t ddrphy_wrphase_read(void) {
	return csr_read_simple(CSR_BASE + 0x30L);
}
static inline void ddrphy_wrphase_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x30L);
}

/* sdram */
#define CSR_SDRAM_BASE (CSR_BASE + 0x800L)
#define CSR_SDRAM_DFII_CONTROL_ADDR (CSR_BASE + 0x800L)
#define CSR_SDRAM_DFII_CONTROL_SIZE 1
static inline uint8_t sdram_dfii_control_read(void) {
	return csr_read_simple(CSR_BASE + 0x800L);
}
static inline void sdram_dfii_control_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x800L);
}
#define CSR_SDRAM_DFII_CONTROL_SEL_OFFSET 0
#define CSR_SDRAM_DFII_CONTROL_SEL_SIZE 1
static inline uint32_t sdram_dfii_control_sel_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdram_dfii_control_sel_read(void) {
	uint32_t word = sdram_dfii_control_read();
	return sdram_dfii_control_sel_extract(word);
}
static inline uint32_t sdram_dfii_control_sel_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sdram_dfii_control_sel_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_control_read();
	uint32_t newword = sdram_dfii_control_sel_replace(oldword, plain_value);
	sdram_dfii_control_write(newword);
}
#define CSR_SDRAM_DFII_CONTROL_CKE_OFFSET 1
#define CSR_SDRAM_DFII_CONTROL_CKE_SIZE 1
static inline uint32_t sdram_dfii_control_cke_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdram_dfii_control_cke_read(void) {
	uint32_t word = sdram_dfii_control_read();
	return sdram_dfii_control_cke_extract(word);
}
static inline uint32_t sdram_dfii_control_cke_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void sdram_dfii_control_cke_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_control_read();
	uint32_t newword = sdram_dfii_control_cke_replace(oldword, plain_value);
	sdram_dfii_control_write(newword);
}
#define CSR_SDRAM_DFII_CONTROL_ODT_OFFSET 2
#define CSR_SDRAM_DFII_CONTROL_ODT_SIZE 1
static inline uint32_t sdram_dfii_control_odt_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdram_dfii_control_odt_read(void) {
	uint32_t word = sdram_dfii_control_read();
	return sdram_dfii_control_odt_extract(word);
}
static inline uint32_t sdram_dfii_control_odt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void sdram_dfii_control_odt_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_control_read();
	uint32_t newword = sdram_dfii_control_odt_replace(oldword, plain_value);
	sdram_dfii_control_write(newword);
}
#define CSR_SDRAM_DFII_CONTROL_RESET_N_OFFSET 3
#define CSR_SDRAM_DFII_CONTROL_RESET_N_SIZE 1
static inline uint32_t sdram_dfii_control_reset_n_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 3) & mask );
}
static inline uint32_t sdram_dfii_control_reset_n_read(void) {
	uint32_t word = sdram_dfii_control_read();
	return sdram_dfii_control_reset_n_extract(word);
}
static inline uint32_t sdram_dfii_control_reset_n_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void sdram_dfii_control_reset_n_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_control_read();
	uint32_t newword = sdram_dfii_control_reset_n_replace(oldword, plain_value);
	sdram_dfii_control_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_ADDR (CSR_BASE + 0x804L)
#define CSR_SDRAM_DFII_PI0_COMMAND_SIZE 1
static inline uint8_t sdram_dfii_pi0_command_read(void) {
	return csr_read_simple(CSR_BASE + 0x804L);
}
static inline void sdram_dfii_pi0_command_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x804L);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_ISSUE_ADDR (CSR_BASE + 0x808L)
#define CSR_SDRAM_DFII_PI0_COMMAND_ISSUE_SIZE 1
static inline uint8_t sdram_dfii_pi0_command_issue_read(void) {
	return csr_read_simple(CSR_BASE + 0x808L);
}
static inline void sdram_dfii_pi0_command_issue_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x808L);
}
#define CSR_SDRAM_DFII_PI0_ADDRESS_ADDR (CSR_BASE + 0x80cL)
#define CSR_SDRAM_DFII_PI0_ADDRESS_SIZE 2
static inline uint16_t sdram_dfii_pi0_address_read(void) {
	uint16_t r = csr_read_simple(CSR_BASE + 0x80cL);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x810L);
	return r;
}
static inline void sdram_dfii_pi0_address_write(uint16_t v) {
	csr_write_simple(v >> 8, CSR_BASE + 0x80cL);
	csr_write_simple(v, CSR_BASE + 0x810L);
}
#define CSR_SDRAM_DFII_PI0_BADDRESS_ADDR (CSR_BASE + 0x814L)
#define CSR_SDRAM_DFII_PI0_BADDRESS_SIZE 1
static inline uint8_t sdram_dfii_pi0_baddress_read(void) {
	return csr_read_simple(CSR_BASE + 0x814L);
}
static inline void sdram_dfii_pi0_baddress_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x814L);
}
#define CSR_SDRAM_DFII_PI0_WRDATA_ADDR (CSR_BASE + 0x818L)
#define CSR_SDRAM_DFII_PI0_WRDATA_SIZE 4
static inline uint32_t sdram_dfii_pi0_wrdata_read(void) {
	uint32_t r = csr_read_simple(CSR_BASE + 0x818L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x81cL);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x820L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x824L);
	return r;
}
static inline void sdram_dfii_pi0_wrdata_write(uint32_t v) {
	csr_write_simple(v >> 24, CSR_BASE + 0x818L);
	csr_write_simple(v >> 16, CSR_BASE + 0x81cL);
	csr_write_simple(v >> 8, CSR_BASE + 0x820L);
	csr_write_simple(v, CSR_BASE + 0x824L);
}
#define CSR_SDRAM_DFII_PI0_RDDATA_ADDR (CSR_BASE + 0x828L)
#define CSR_SDRAM_DFII_PI0_RDDATA_SIZE 4
static inline uint32_t sdram_dfii_pi0_rddata_read(void) {
	uint32_t r = csr_read_simple(CSR_BASE + 0x828L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x82cL);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x830L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x834L);
	return r;
}
#define CSR_SDRAM_DFII_PI1_COMMAND_ADDR (CSR_BASE + 0x838L)
#define CSR_SDRAM_DFII_PI1_COMMAND_SIZE 1
static inline uint8_t sdram_dfii_pi1_command_read(void) {
	return csr_read_simple(CSR_BASE + 0x838L);
}
static inline void sdram_dfii_pi1_command_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x838L);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_ISSUE_ADDR (CSR_BASE + 0x83cL)
#define CSR_SDRAM_DFII_PI1_COMMAND_ISSUE_SIZE 1
static inline uint8_t sdram_dfii_pi1_command_issue_read(void) {
	return csr_read_simple(CSR_BASE + 0x83cL);
}
static inline void sdram_dfii_pi1_command_issue_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x83cL);
}
#define CSR_SDRAM_DFII_PI1_ADDRESS_ADDR (CSR_BASE + 0x840L)
#define CSR_SDRAM_DFII_PI1_ADDRESS_SIZE 2
static inline uint16_t sdram_dfii_pi1_address_read(void) {
	uint16_t r = csr_read_simple(CSR_BASE + 0x840L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x844L);
	return r;
}
static inline void sdram_dfii_pi1_address_write(uint16_t v) {
	csr_write_simple(v >> 8, CSR_BASE + 0x840L);
	csr_write_simple(v, CSR_BASE + 0x844L);
}
#define CSR_SDRAM_DFII_PI1_BADDRESS_ADDR (CSR_BASE + 0x848L)
#define CSR_SDRAM_DFII_PI1_BADDRESS_SIZE 1
static inline uint8_t sdram_dfii_pi1_baddress_read(void) {
	return csr_read_simple(CSR_BASE + 0x848L);
}
static inline void sdram_dfii_pi1_baddress_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x848L);
}
#define CSR_SDRAM_DFII_PI1_WRDATA_ADDR (CSR_BASE + 0x84cL)
#define CSR_SDRAM_DFII_PI1_WRDATA_SIZE 4
static inline uint32_t sdram_dfii_pi1_wrdata_read(void) {
	uint32_t r = csr_read_simple(CSR_BASE + 0x84cL);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x850L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x854L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x858L);
	return r;
}
static inline void sdram_dfii_pi1_wrdata_write(uint32_t v) {
	csr_write_simple(v >> 24, CSR_BASE + 0x84cL);
	csr_write_simple(v >> 16, CSR_BASE + 0x850L);
	csr_write_simple(v >> 8, CSR_BASE + 0x854L);
	csr_write_simple(v, CSR_BASE + 0x858L);
}
#define CSR_SDRAM_DFII_PI1_RDDATA_ADDR (CSR_BASE + 0x85cL)
#define CSR_SDRAM_DFII_PI1_RDDATA_SIZE 4
static inline uint32_t sdram_dfii_pi1_rddata_read(void) {
	uint32_t r = csr_read_simple(CSR_BASE + 0x85cL);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x860L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x864L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x868L);
	return r;
}
#define CSR_SDRAM_DFII_PI2_COMMAND_ADDR (CSR_BASE + 0x86cL)
#define CSR_SDRAM_DFII_PI2_COMMAND_SIZE 1
static inline uint8_t sdram_dfii_pi2_command_read(void) {
	return csr_read_simple(CSR_BASE + 0x86cL);
}
static inline void sdram_dfii_pi2_command_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x86cL);
}
#define CSR_SDRAM_DFII_PI2_COMMAND_ISSUE_ADDR (CSR_BASE + 0x870L)
#define CSR_SDRAM_DFII_PI2_COMMAND_ISSUE_SIZE 1
static inline uint8_t sdram_dfii_pi2_command_issue_read(void) {
	return csr_read_simple(CSR_BASE + 0x870L);
}
static inline void sdram_dfii_pi2_command_issue_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x870L);
}
#define CSR_SDRAM_DFII_PI2_ADDRESS_ADDR (CSR_BASE + 0x874L)
#define CSR_SDRAM_DFII_PI2_ADDRESS_SIZE 2
static inline uint16_t sdram_dfii_pi2_address_read(void) {
	uint16_t r = csr_read_simple(CSR_BASE + 0x874L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x878L);
	return r;
}
static inline void sdram_dfii_pi2_address_write(uint16_t v) {
	csr_write_simple(v >> 8, CSR_BASE + 0x874L);
	csr_write_simple(v, CSR_BASE + 0x878L);
}
#define CSR_SDRAM_DFII_PI2_BADDRESS_ADDR (CSR_BASE + 0x87cL)
#define CSR_SDRAM_DFII_PI2_BADDRESS_SIZE 1
static inline uint8_t sdram_dfii_pi2_baddress_read(void) {
	return csr_read_simple(CSR_BASE + 0x87cL);
}
static inline void sdram_dfii_pi2_baddress_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x87cL);
}
#define CSR_SDRAM_DFII_PI2_WRDATA_ADDR (CSR_BASE + 0x880L)
#define CSR_SDRAM_DFII_PI2_WRDATA_SIZE 4
static inline uint32_t sdram_dfii_pi2_wrdata_read(void) {
	uint32_t r = csr_read_simple(CSR_BASE + 0x880L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x884L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x888L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x88cL);
	return r;
}
static inline void sdram_dfii_pi2_wrdata_write(uint32_t v) {
	csr_write_simple(v >> 24, CSR_BASE + 0x880L);
	csr_write_simple(v >> 16, CSR_BASE + 0x884L);
	csr_write_simple(v >> 8, CSR_BASE + 0x888L);
	csr_write_simple(v, CSR_BASE + 0x88cL);
}
#define CSR_SDRAM_DFII_PI2_RDDATA_ADDR (CSR_BASE + 0x890L)
#define CSR_SDRAM_DFII_PI2_RDDATA_SIZE 4
static inline uint32_t sdram_dfii_pi2_rddata_read(void) {
	uint32_t r = csr_read_simple(CSR_BASE + 0x890L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x894L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x898L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x89cL);
	return r;
}
#define CSR_SDRAM_DFII_PI3_COMMAND_ADDR (CSR_BASE + 0x8a0L)
#define CSR_SDRAM_DFII_PI3_COMMAND_SIZE 1
static inline uint8_t sdram_dfii_pi3_command_read(void) {
	return csr_read_simple(CSR_BASE + 0x8a0L);
}
static inline void sdram_dfii_pi3_command_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x8a0L);
}
#define CSR_SDRAM_DFII_PI3_COMMAND_ISSUE_ADDR (CSR_BASE + 0x8a4L)
#define CSR_SDRAM_DFII_PI3_COMMAND_ISSUE_SIZE 1
static inline uint8_t sdram_dfii_pi3_command_issue_read(void) {
	return csr_read_simple(CSR_BASE + 0x8a4L);
}
static inline void sdram_dfii_pi3_command_issue_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x8a4L);
}
#define CSR_SDRAM_DFII_PI3_ADDRESS_ADDR (CSR_BASE + 0x8a8L)
#define CSR_SDRAM_DFII_PI3_ADDRESS_SIZE 2
static inline uint16_t sdram_dfii_pi3_address_read(void) {
	uint16_t r = csr_read_simple(CSR_BASE + 0x8a8L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x8acL);
	return r;
}
static inline void sdram_dfii_pi3_address_write(uint16_t v) {
	csr_write_simple(v >> 8, CSR_BASE + 0x8a8L);
	csr_write_simple(v, CSR_BASE + 0x8acL);
}
#define CSR_SDRAM_DFII_PI3_BADDRESS_ADDR (CSR_BASE + 0x8b0L)
#define CSR_SDRAM_DFII_PI3_BADDRESS_SIZE 1
static inline uint8_t sdram_dfii_pi3_baddress_read(void) {
	return csr_read_simple(CSR_BASE + 0x8b0L);
}
static inline void sdram_dfii_pi3_baddress_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x8b0L);
}
#define CSR_SDRAM_DFII_PI3_WRDATA_ADDR (CSR_BASE + 0x8b4L)
#define CSR_SDRAM_DFII_PI3_WRDATA_SIZE 4
static inline uint32_t sdram_dfii_pi3_wrdata_read(void) {
	uint32_t r = csr_read_simple(CSR_BASE + 0x8b4L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x8b8L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x8bcL);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x8c0L);
	return r;
}
static inline void sdram_dfii_pi3_wrdata_write(uint32_t v) {
	csr_write_simple(v >> 24, CSR_BASE + 0x8b4L);
	csr_write_simple(v >> 16, CSR_BASE + 0x8b8L);
	csr_write_simple(v >> 8, CSR_BASE + 0x8bcL);
	csr_write_simple(v, CSR_BASE + 0x8c0L);
}
#define CSR_SDRAM_DFII_PI3_RDDATA_ADDR (CSR_BASE + 0x8c4L)
#define CSR_SDRAM_DFII_PI3_RDDATA_SIZE 4
static inline uint32_t sdram_dfii_pi3_rddata_read(void) {
	uint32_t r = csr_read_simple(CSR_BASE + 0x8c4L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x8c8L);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x8ccL);
	r <<= 8;
	r |= csr_read_simple(CSR_BASE + 0x8d0L);
	return r;
}

/* ddrctrl */
#define CSR_DDRCTRL_BASE (CSR_BASE + 0x1000L)
#define CSR_DDRCTRL_INIT_DONE_ADDR (CSR_BASE + 0x1000L)
#define CSR_DDRCTRL_INIT_DONE_SIZE 1
static inline uint8_t ddrctrl_init_done_read(void) {
	return csr_read_simple(CSR_BASE + 0x1000L);
}
static inline void ddrctrl_init_done_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x1000L);
}
#define CSR_DDRCTRL_INIT_ERROR_ADDR (CSR_BASE + 0x1004L)
#define CSR_DDRCTRL_INIT_ERROR_SIZE 1
static inline uint8_t ddrctrl_init_error_read(void) {
	return csr_read_simple(CSR_BASE + 0x1004L);
}
static inline void ddrctrl_init_error_write(uint8_t v) {
	csr_write_simple(v, CSR_BASE + 0x1004L);
}

#endif
